// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ExampleContract {
    uint256 public balance;
    
    function deposit(uint256 amount) public {
        require(amount > 0, "Amount must be greater than 0");
        balance += amount;
    }
    
    function withdraw(uint256 amount) public {
        require(amount > 0, "Amount must be greater than 0");
        require(amount <= balance, "Insufficient balance");
        balance -= amount;
    }
    
    function add(uint256 a, uint256 b) public pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a && c >= b);
        return c;
    }
    
    function divide(uint256 a, uint256 b) public pure returns (uint256) {
        require(b != 0, "Cannot divide by zero");
        return a / b;
    }
    
    function transfer(address payable recipient, uint256 amount) public {
        require(amount <= balance, "Insufficient balance");
        balance -= amount;
        recipient.transfer(amount);
        revert("Transfer failed"); // Revert if transfer fails
    }
}
